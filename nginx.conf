worker_processes  auto;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include mime.types;
    default_type application/octet-stream;

    lua_shared_dict backend_paths 10m;  # Shared dictionary to store path-to-IP mappings

    # Management API to add/remove path-IP mappings
    server {
        listen 8080;  # Management API port

        location /debug {
            content_by_lua_block {
                local backend_paths = ngx.shared.backend_paths
                ngx.say("Current mappings in lua_shared_dict:")
                for _, key in ipairs(backend_paths:get_keys(0)) do
                    ngx.say(key, " -> ", backend_paths:get(key))
                    ngx.log(ngx.ERR, "Key: ", key, " -> Value: ", backend_paths:get(key))
                end
            }
        }

        # Add a new path rule with backend IP
        location /api/add_path {
           content_by_lua_block {
                    local cjson = require "cjson"
                    ngx.req.read_body()
                    local data = cjson.decode(ngx.req.get_body_data())
                    ngx.say("Incoming data",cjson.encode(data))
                    if not data.path_rule or not data.ip_address then
                        ngx.status = 400
                        ngx.say("Missing 'path_rule' or 'ip_address'")
                        return
                    end

                    local backend_paths = ngx.shared.backend_paths
                    backend_paths:set(data.path_rule, data.ip_address)

                    -- Add logging to confirm the operation
                    ngx.log(ngx.ERR, "Added Path Rule: ", data.path_rule, " -> ", data.ip_address)
                    local backend_paths = ngx.shared.backend_paths
                    ngx.say("Current mappings in lua_shared_dict:")
                    for _, key in ipairs(backend_paths:get_keys(0)) do
                        ngx.say(key, " -> ", backend_paths:get(key))
                        ngx.say("Key: ", key, " -> Value: ", backend_paths:get(key))
                    end
                    ngx.say("Added path rule: ", data.path_rule, " -> ", data.ip_address)
                }
            }

        # Remove a path rule
        location /api/remove_path {
            content_by_lua_block {
                local cjson = require "cjson"
                ngx.req.read_body()
                local data = cjson.decode(ngx.req.get_body_data())

                if not data.path_rule then
                    ngx.status = 400
                    ngx.say("Missing 'path_rule'")
                    return
                end

                local backend_paths = ngx.shared.backend_paths
                backend_paths:delete(data.path_rule)
                ngx.say("Removed path rule: ", data.path_rule)
            }
        }
    }

    # Main server to route requests dynamically based on path rules
    server {
        listen 80;
        set $target "";

        location /live/ {
        content_by_lua_block {
            local backend_paths = ngx.shared.backend_paths
            local request_uri = ngx.var.uri
            ngx.log(ngx.INFO, "Request URI: ", request_uri)

            -- Extract the base path (e.g., /live/org/uuid)
            local base_path = request_uri:match("(/live/[^/]+/[^/]+)")
            ngx.log(ngx.INFO, "Base Path: ", base_path)

            if base_path then
                local backend_ip = backend_paths:get(base_path)
                ngx.log(ngx.INFO, "Backend IP for Base Path: ", backend_ip)

                if backend_ip then
                    ngx.var.target = backend_ip
                    ngx.log(ngx.INFO, "Routing to target: ", backend_ip)
                    return ngx.exec("@proxy")  -- Use ngx.exec directly without sending headers
                else
                    ngx.log(ngx.WARN, "No backend found for Base Path: ", base_path)
                    ngx.status = 404
                    ngx.say("No backend found for base path: ", base_path)
                    return ngx.exit(ngx.HTTP_NOT_FOUND)
                end
            else
                ngx.log(ngx.ERR, "Invalid request path: ", request_uri)
                ngx.status = 400
                ngx.say("Invalid request path: ", request_uri)
                return ngx.exit(ngx.HTTP_BAD_REQUEST)
            end
        }
        }
        location @proxy {
            proxy_pass http://$target$request_uri;  
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
    }
}
